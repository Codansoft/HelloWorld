==== Successful Git branching model (nvie) ====
	master						// Always reflects a production-ready state
		|--hotfix-*				// Created from the master. 
	release-1.1					// Created from the develop branch. Must merge back into master, develop.
	develop
		|--feature-branches		// Feature branches typically exist in developer repos only
		|--issue-43
====================================================================================================
##Online Reference
		http://gitref.org

## Console 
	- MinGW (Minimalist GNU for Windows)
	- MSYS, a contraction of "Minimal SYStem - alternative to cmd.exe
	gitk - The Git repository browser
	gitk [<options>] [<revision range>] [\--] [<path>…​]

	git-gui - A portable graphical interface to Git
	git gui [<command>] [arguments]
	
	clear
	$ pwd "Printing the Working Directory"
	$ explorer .				// Opens explorer
	$ cd <drag and drop dir>
	$ cat file.txt					//Read File

#### Porcelain Commands ####
## Setup
	$ git config --list				//Checking Your Settings
	$ git config user.name
	$ git config --global user.name "John Doe"
	$ git config --global user.email dariusz.nazar@fs.utc.com
	$ git config --global core.editor "'c:/program files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"

	$ git mergetool --tool-help
	$ git config --global --add merge.tool kdiff3		IntelliJ IDEA, P4Merge, Meld
	$ git config --global --add mergetool.kdiff3.path "C:/Program Files/KDiff3/kdiff3.exe"
	$ git config --global --add mergetool.kdiff3.trustExitCode false
	$ git config --global  mergetool.keepBackup false

	$ git config --global --add diff.guitool kdiff3
	$ git config --global --add difftool.kdiff3.path "C:/Program Files/KDiff3/kdiff3.exe"
	$ git config --global --add difftool.kdiff3.trustExitCode false
	
	$ git config --global credential.helper cache		// Set username and password - temporary
	
## Remote
	cd X:\Users
	$ git clone "D:\00. Projects\Git\Powerful" PowerfulTestX
	$ git clone file:///srv/git/project.git
	$ git remote -v
	$ git remote show origin				// Information
	$ git remote add proj_name /srv/git/project.git
	$ git remote rename ag antonio			// Rename remote source (origin)

	$ git init
	$ git init --bare							// bare repo. Center for sharing (don’t have a working directory)
	$ git clone --bare myProject myProject.git	// bare repository directories end in .git
	$ touch .gitignore
	$ git add .					// Add all files & subdirectories

	$ git clean -n  			// List files to delete
	$ git clean -f				// Delete untract files
	
	$ git commit -am 'message'		// Commit All files
	$ rm file.txt					// Remove File
	$ git rm file.txt
	$ git rm file.txt --cached		// Remove file from Staged (Index)
	
	$ git mv file_from file_to		// Rename File

## Inspection
	$ git log
	$ git log - 3			// Show 3 last commits
	$ git log --oneline --decorate
	$ git log --pretty=format:"%h - %an, %ar : %s"
	$ git log --graph --oneline --decorate  --all		// *** Great ***
	$ git log --author
	$ git log --author="John"
	$ git log --after="2014-7-1"
	$ git log --grep=searchedText --no-merges
	$ git show HEAD~2
	$ git blame fileName.txt
	
## Tagging - mark release points
		1) lightweight - pointer to commit
		2) annotated - full objects
	$ git tag 
	$ git tag -a v1.4 -m "my version 1.4"
	$ git show v1.4
	$ git tag v1.4-lightweight

## Aliase for each command
	$ git config --global alias.st status	== $ git st

## Branch
	// HEAD pointer - branch you’re currently on. Snapshot of your last commit.
	// INDEX - proposed next commit.
	$ git branch -r				// Remote branches
	$ git branch develop		// Create Branch
	$ git checkout develop		// Switching Branches
	$ git checkout master
	$ git checkout -b iss53		// Switched to a new branch "iss53"		== $ git branch iss53 ; $ git checkout iss53
	$ git branch -m "newName"	// Rename branch 
	
	
## Merge Branch
	$ git checkout master
	$ git merge hotfix
	$ git mergetool					// Initiate merge ("merge.tool" variable in ".gitconfig")
	$ git branch -d hotfix			// Deleted branch hotfix
	$ git branch -vv				// Branch status with Tracking info
	$ git merge --abort				// back out of the merge
	
## Rebase 
	// merge OR rebase?
	// Do not rebase commits that exist outside your repository.
	// rebase local changes before you push them
	// Steps:
	$ git checkout experiment-branch
	$ git rebase master
	$ git checkout master
	$ git merge experiment			// fast-forward merge
	
	$ git pull --rebase
	
## Comparison
	// run git diff to see details of the git status command
	$ git status -s						// Show what changed (--short)
	$ git status -sb					// Show what changed on branch (--branch)
	$ git log --oneline master..origin/master	// 
	$ git diff							// Show diff of unstaged changes
	$ git diff --cached					// Show diff of staged changes
	$ git diff HEAD 					// Show diff of all staged or unstaged changes
	$ git diff --stat 					// Show summary of changes instead of a full diff
	$ git diff HEAD --stat				// Show summary of all changes
	$ git diff --stat master...develop	// What was introduced in develop branch since its common ancestor.
	$ git diff branchA...branchB 		// to inspect branchB relative to branchA 
	$ git diff HEAD HEAD~2
	$ git diff branch1 master			// Differences between branches
	$ git diff HEAD~10	(--stat)
	$ git diff --color-words			// diff on a word-by-word basis
	$ git diff --color-words=.			// diff on char-char basis
	
## Collaborating
	// Fetch - safe way to review commits before integrating them.
	// 		 - only downloads the data to your local repository
	$ git fetch origin					// Fetch all branches.
	$ git fetch origin develop			// fetch only the develop branch.
	$ git merge
	$ git pull <remote>					// fetch & merge remote’s copy of the current branch
	$ git pull --rebase origin
	
	Example:
	$ git checkout master
	$ git fetch origin master		// fetch only master branch
	$ git log origin/master
	$ git merge origin/master
	$ git rebase -i origin/master
	$ git push origin master
		
	// Before PUSH: synchronize  
	//  1. pull the remote branch and merge it into your local one
	//	2. then push (fast-forward)
	// You should only push to repositories created with  --bare flag 
	// never push to another developer’s repository. 
	
	$ git push origin --all				// Push all your local branches
	$ git push origin develop			// Push your develop to origin
	$ git push origin develop --tags	// Push only develop branch with tags
	$ git push origin localBranchFix:RemoteBranchFix
	
	$ git fetch origin
	$ git fetch proj_name					// get data from your remote projects
	$ git push origin master
	
## stash
	$ git stash --include-untracked		//all untracked files are also stashed 
	$ git stash list
	$ git stash show
	$ git stash apply
	
## Rewriting History
	// Only on Local Repo.
	$ git commit --amend			// Modify your last commit message
	$ git commit --amend			// fix up the most recent commit
	$ git rebase -i HEAD~3
	$ git rebase -i origin/master	//Squash commits, fix up commit messages etc.
	
	$ git reset --soft HEAD~1 		// Undo last commit. No change in Index or Working Directory.
	$ git reset (--mixed) HEAD~1	// Undo last commit & unstage. No change in Working Directory.
	$ git reset --hard HEAD~1		// Undo last commit & unstage & overwrites files. Destroy data - Dangerous!
	
	$ git reset HEAD 					// Unstages all changes. Default --mixed (only Index)
	$ git reset --hard 7843D5A25..
	$ git reset --hard HEAD				// Delete all my changes and start again
	$ git checkout HEAD filename.txt 	// Reverts any changes on that file. 
	
	You can use it to squash 2 last commits:
		1)	$ git reset --soft HEAD~2
		2)	$ git commit

	$ git revert HEAD				// ?
	$ git revert <commit>			// undoes a single commit in a new commit
	
	
	
	
